

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mary Grace M. Callet
 */
import java.util.Scanner;
public class DSAPortfolio {
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        char ans = 'Y';
        
        while (ans == 'Y' || ans == 'y') {
            System.out.println("Menu Lesson in Data Structure");
            System.out.println("[1] List");
            System.out.println("[2] Linked List");
            System.out.println("[3] Stack");
            System.out.println("[4] Queue");
            System.out.println("[5] Tree");
            System.out.println("[6] Binary Tree");
            System.out.println("[7] Graph");
            System.out.println("[8] Exit");

            System.out.print("ENTER YOUR CHOICE: ");
            int mainChoice = console.nextInt();
            
            System.out.print("-------------------------------------------------------------------------------------------------------------------------- ");
            System.out.println();
            
            switch (mainChoice) {
                case 1:
                    System.out.println("List Data Structure");
                    System.out.println();
                    System.out.println("import java.util.ArrayList;");
                    System.out.println("import java.util.List;");
                    System.out.println("import java.util.Scanner; ");
                    System.out.println("public class NewClass {");
                    System.out.println("     private static final List<String> items = new ArrayList<>();");
                    System.out.println("     private static final Scanner scanner = new Scanner(System.in);");
                    System.out.println();
                    System.out.println("     public static void main(String[] args) {");
                    System.out.println("          while (true) {");
                    System.out.println("                 displayMenu();");
                    System.out.println("                 int choice = getUserChoice();");
                    System.out.println();
                    System.out.println("                 switch (choice) {");
                    System.out.println("                     case 1:");
                    System.out.println("                          viewShoppingList();");
                    System.out.println("                          break;");
                    System.out.println("                     case 2:");
                    System.out.println("                          addItem();");
                    System.out.println("                          break;   ");
                    System.out.println("                     case 3:");
                    System.out.println("                          removeItem();");
                    System.out.println("                          break;");
                    System.out.println("                     case 4:");
                    System.out.println("                          clearShoppingList();");
                    System.out.println("                          break;");
                    System.out.println("                     case 5:");
                    System.out.println("                          System.out.println(\"Thank you for using the Shopping List. Goodbye!");
                    System.out.println("                          System.exit(0);");
                    System.out.println("                     default:");
                    System.out.println("                          System.out.println(\"Invalid choice. Please try again.");
                    System.out.println("                }");
                    System.out.println("            }");
                    System.out.println("       }");
                    System.out.println();
                    System.out.println("       private static void displayMenu() {");
                    System.out.println("             System.out.println(\"\\nShopping List Menu:");
                    System.out.println("             System.out.println(\"1. View Shopping List\");");
                    System.out.println("             System.out.println(\"2. Add Item\");");
                    System.out.println("             System.out.println(\"3. Remove Item\");");
                    System.out.println("             System.out.println(\"4. Clear Shopping List\");");
                    System.out.println("             System.out.println(\"5. Exit\");");
                    System.out.println("       }");
                    System.out.println();
                    System.out.println("       private static int getUserChoice() {");
                    System.out.println("            System.out.print(\"Enter your choice: \");");
                    System.out.println("            return scanner.nextInt();");
                    System.out.println("       }");
                    System.out.println();
                    System.out.println("       private static void viewShoppingList() {");
                    System.out.println("            System.out.println(\"\\nShopping List:\");");
                    System.out.println("            if (items.isEmpty()) {");
                    System.out.println("                System.out.println(\"No items in the list.\");");
                    System.out.println("            } else {  ");
                    System.out.println("                for (String item : items) {");
                    System.out.println("                    System.out.print(item + \", \");");
                    System.out.println("                }");
                    System.out.println("                System.out.println();}");
                    System.out.println("            }");
                    System.out.println("      }");
                    System.out.println();
                    System.out.println("      private static void addItem() {");
                    System.out.println("           System.out.print(\"Enter the item to add: \");");
                    System.out.println("           String newItem = scanner.next();");
                    System.out.println("           items.add(newItem);");
                    System.out.println("           System.out.println(\"Item added to the shopping list!\");  ");
                    System.out.println("     }");
                    System.out.println();
                    System.out.println("     private static void removeItem() {");
                    System.out.println("          if (items.isEmpty()) {");
                    System.out.println("               System.out.println(\"No items to remove. Shopping list is empty.");
                    System.out.println("          } else {");
                    System.out.println("               System.out.print(\"Enter the item to remove: \");  ");
                    System.out.println("               String itemToRemove = scanner.next();");
                    System.out.println();
                    System.out.println("              if (items.remove(itemToRemove)) {");
                    System.out.println("                   System.out.println(\"Item removed from the shopping list!\");");
                    System.out.println("              } else {");
                    System.out.println("                   System.out.println(\"Item not found in the shopping list.\");");
                    System.out.println("              }");
                    System.out.println("          }");
                    System.out.println("     }");
                    System.out.println();
                    System.out.println("     private static void clearShoppingList() {");
                    System.out.println("         items.clear();");
                    System.out.println("         System.out.println(\"Shopping list cleared!\");");
                    System.out.println("     }");
                    System.out.println("  }");
                    System.out.println();
                    System.out.println("------------------------------------------------------------------------------------------------------------------------- ");
                    
                    break;

                case 2:
                    System.out.println("Linked List Data Structure");
                    System.out.println();
                    System.out.println("import java.util.Scanner;");
                    System.out.println();
                    System.out.println("class Product {");
                    System.out.println("     String name;");
                    System.out.println();
                    System.out.println("     Product(String name) {");
                    System.out.println("          this.name = name;");
                    System.out.println("     }");
                    System.out.println("}");
                    System.out.println();
                    System.out.println("class Node {");
                    System.out.println("     String product;");
                    System.out.println("     Node next;");
                    System.out.println();
                    System.out.println("     Node(String product) {");
                    System.out.println("          this.product = product;");
                    System.out.println("     }");
                    System.out.println("}");
                    System.out.println();
                    System.out.println("public class circularlinked {");
                    System.out.println("     // Declaring head and tail pointer as null.");
                    System.out.println("     public Node head = null;");
                    System.out.println("     public Node tail = null;");
                    System.out.println();
                    System.out.println("     public void addItem(String product) {");
                    System.out.println();
                    System.out.println("            Node newNode = new Node(product);");
                    System.out.println("            // Checks if the list is empty.");
                    System.out.println("            if (head == null) {");
                    System.out.println("                  head = newNode;");
                    System.out.println("                  tail = newNode;  ");
                    System.out.println("                  newNode.next = head;");
                    System.out.println("             } else {");
                    System.out.println("                   tail.next = newNode;");
                    System.out.println("                   tail = newNode;");
                    System.out.println("                   tail.next = head;  ");
                    System.out.println("             }");
                    System.out.println("      }");
                    System.out.println();
                    System.out.println("      // Displays all the nodes in the list.  ");
                    System.out.println("      public void displayCart() {");
                    System.out.println("           Node current = head;   ");
                    System.out.println("           if (head == null) {");
                    System.out.println("                 System.out.println(\"Shopping Cart is empty\");");
                    System.out.println("           } else {");
                    System.out.println("                  System.out.println(\"Shopping Cart items: \");");
                    System.out.println("                 do {");
                    System.out.println("                    System.out.print(\" \" + current.product);");
                    System.out.println("                    current = current.next;");
                    System.out.println("                 } while (current != head);");
                    System.out.println("                 System.out.println();   ");
                    System.out.println("           }");
                    System.out.println("      }");
                    System.out.println();
                    System.out.println("      public int getTotalProducts() {");
                    System.out.println("            int count = 0;");
                    System.out.println("            Node current = head;");
                    System.out.println("            if (head != null) {");
                    System.out.println("                 do {");
                    System.out.println("                    count++;");
                    System.out.println("                    current = current.next;");
                    System.out.println("                 } while (current != head);");
                    System.out.println("            }");
                    System.out.println("            return count;");
                    System.out.println("      }");
                    System.out.println();
                    System.out.println("      public static void main(String[] args) {");
                    System.out.println("           // Ask for product names from users using the Scanner method");
                    System.out.println("           Scanner input = new Scanner(System.in);  ");
                    System.out.println("           circularlinked cart = new circularlinked();");
                    System.out.println();
                    System.out.println("           char ans;");
                    System.out.println("           do {");
                    System.out.println("              System.out.print(\"Enter product name: \");");
                    System.out.println("              String product = input.next();");
                    System.out.println("              cart.addItem(product);");
                    System.out.println();
                    System.out.println("              System.out.print(\"Do you want to add another product? (Y/N): \");");
                    System.out.println("              ans = input.next().charAt(0);  ");
                    System.out.println("           } while (ans == 'Y' || ans == 'y');");
                    System.out.println();
                    System.out.println("           System.out.println();");
                    System.out.println("           cart.displayCart(); ");
                    System.out.println();
                    System.out.println("           // Display the total count of products");
                    System.out.println("           int totalProducts = cart.getTotalProducts();");
                    System.out.println("           System.out.println(\"Total Products: \" + totalProducts);");
                    System.out.println("    }");
                    System.out.println("}");
                    System.out.println();
                    System.out.println("--------------------------------------------------------------------------------------------------------- ");
                    break;

                case 3:
                    System.out.println("Stack Data Structure");
                    System.out.println();
                    System.out.println("import java.util.Stack;");
                    System.out.println("import java.util.Scanner;");
                    System.out.println();
                    System.out.println("public class StackLibrary {");
                    System.out.println("     public static void main(String[] args) {");
                    System.out.println("          Scanner console = new Scanner(System.in);");
                    System.out.println();
                    System.out.println("          Stack<String> bookStack = new Stack<>();");
                    System.out.println("          boolean bookSystemActive = true;");
                    System.out.println();
                    System.out.println("               while (bookSystemActive) {");
                    System.out.println("                    System.out.println(\"Library Book Management System\");");
                    System.out.println("                    System.out.println(\"[1] Add a Book\");");
                    System.out.println("                    System.out.println(\"[2] Remove the Last Added Book\");");
                    System.out.println("                    System.out.println(\"[3] View Books in the Library\");");
                    System.out.println();
                    System.out.println("                    System.out.print(\"Enter your choice: \");");
                    System.out.println("                    int choice = console.nextInt();");
                    System.out.println();
                    System.out.println("                    switch (choice) {");
                    System.out.println("                    case 1:");
                    System.out.println("                        // Add a Book");
                    System.out.println("                        System.out.print(\"Enter the title of the book: \");");
                    System.out.println("                        console.nextLine();");
                    System.out.println("                        String bookTitle = console.nextLine();");
                    System.out.println("                        bookStack.push(bookTitle);");
                    System.out.println("                        System.out.println(\"Book added: \" + bookTitle);");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    case 2:");
                    System.out.println("                        // Remove the Last Added Book");
                    System.out.println("                        if (!bookStack.isEmpty()) {");
                    System.out.println("                            String lastAddedBook = bookStack.pop();");
                    System.out.println("                            System.out.println(\"Removed book: \" + lastAddedBook);");
                    System.out.println("                        } else {");
                    System.out.println("                            System.out.println(\"No books to remove. Stack is empty.\");");
                    System.out.println("                        }");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    case 3:");
                    System.out.println("                        // View Books in the Library");
                    System.out.println("                        System.out.println(\"Books in the Library: \" + bookStack);");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    case 4;");
                    System.out.println("                        bookSystemActive = false; // Exit the book system");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    default:");
                    System.out.println("                        System.out.println(\"Invalid choice. Please enter a valid option.\");");
                    System.out.println("                        break;");
                    System.out.println("               }");
                    System.out.println();
                    System.out.println("               // Prompt for another try");
                    System.out.println("               System.out.print(\"\\nContinue Using Library System? (Y/N): \");");
                    System.out.println("               char continueChoice = console.next().charAt(0);");
                    System.out.println();
                    System.out.println("               if (!(continueChoice == 'Y' || continueChoice == 'y')) {");
                    System.out.println("                    bookSystemActive = false;");
                    System.out.println("               }");
                    System.out.println("           }");
                    System.out.println("      }");
                    System.out.println("  }");
                    System.out.println();
                    System.out.println("------------------------------------------------------------------------------------------------------------------------- ");
                    
                    break;
                case 4:
                    System.out.println("Queue Data Structure");
                    System.out.println();
                    System.out.println("import java.util.LinkedList;");
                    System.out.println("import java.util.Queue;");
                    System.out.println("import java.util.Scanner;");
                    System.out.println();
                    System.out.println("public class QueueConcertTicket {");
                    System.out.println("     public static void main(String[] args) {");
                    System.out.println("          Scanner console = new Scanner(System.in);");
                    System.out.println();
                    System.out.println("          Queue<String> ticketQueue = new LinkedList<>();");
                    System.out.println("          boolean concertTicketSystemActive = true;");
                    System.out.println("          int availableTickets = 50;");
                    System.out.println();
                    System.out.println("          while (concertTicketSystemActive) {");
                    System.out.println("                System.out.println(\"Concert Ticket System\");");
                    System.out.println("                System.out.println(\"[1] View available tickets\");");
                    System.out.println("                System.out.println(\"[2] View current queue\");");
                    System.out.println("                System.out.println(\"[3] Buy a ticket\");");
                    System.out.println("                System.out.println(\"[4] Return to main menu\");");
                    System.out.println();
                    System.out.println("                System.out.print(\"ENTER YOUR CHOICE: \");");
                    System.out.println("                int ticketChoice = console.nextInt();");
                    System.out.println();
                    System.out.println("                switch (ticketChoice) {");
                    System.out.println("                    case 1:");
                    System.out.println("                        // View available tickets");
                    System.out.println("                        System.out.println(\"Available Tickets: \" + availableTickets);");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    case 2:");
                    System.out.println("                        // View current queue");
                    System.out.println("                        System.out.println(\"Current Queue: \" + ticketQueue);");
                    System.out.println("                        break;");
                    System.out.println();
                    System.out.println("                    case 3:");
                    System.out.println("                        System.out.println(\"Concert Ticket Buyers Queue\");");
                    System.out.println("                        int queueSize = ticketQueue.size();");
                    System.out.println("                        System.out.println(\"Number of people in the queue: \" + queueSize);");
                    System.out.println();
                    System.out.println("                        System.out.println(\"Choose an option:\");");
                    System.out.println("                        System.out.println(\"[a] Join the queue\");");
                    System.out.println("                        System.out.println(\"[b] Process the next buyer\");");
                    System.out.println();
                    System.out.println("                        char option = console.next().charAt(0);");
                    System.out.println();
                    System.out.println("                        switch (option) {");
                    System.out.println("                            case 'a':");
                    System.out.println("                                // Join the queue (add to the rear)");
                    System.out.println("                                System.out.print(\"Enter your name: \");");
                    System.out.println("                                String buyerName = console.next();");
                    System.out.println("                                ticketQueue.add(buyerName);");
                    System.out.println("                                System.out.println(\"Added to the queue: \" + buyerName);");
                    System.out.println("                                break;");
                    System.out.println();
                    System.out.println("                            case 'b':");
                    System.out.println("                                // Process the next buyer (remove from the front)");
                    System.out.println("                                 if (!ticketQueue.isEmpty()) {");
                    System.out.println("                                    String nextBuyer = ticketQueue.poll();");
                    System.out.println("                                    System.out.println(\"Processed buyer: \" + nextBuyer);");
                    System.out.println("                                    availableTickets--;");
                    System.out.println("                                    System.out.println(\"Available Tickets: \" + availableTickets);");
                    System.out.println("                                 } else {");
                    System.out.println("                                    System.out.println(\"Queue is empty. No buyers to process.\");");
                    System.out.println("                                 }");
                    System.out.println("                                 break;");
                    System.out.println();
                    System.out.println("                            default:");
                    System.out.println("                                 System.out.println(\"Invalid option.\");");
                    System.out.println("                                 break;");
                    System.out.println("                      }");
                    System.out.println();
                    System.out.println("                      // Prompt for another try");
                    System.out.println("                      System.out.print(\"\\nContinue Buying Tickets? (Y/N): \");");
                    System.out.println("                      char ans = console.next().charAt(0);");
                    System.out.println("                      System.out.println();");
                    System.out.println();
                    System.out.println("                      if (!(ans == 'Y' || ans == 'y')) {");
                    System.out.println("                         concertTicketSystemActive = false;");
                    System.out.println("                      }");
                    System.out.println("                      break;");
                    System.out.println();
                    System.out.println("                 case 4:");
                    System.out.println("                 concertTicketSystemActive = false; // Exit the concert ticket system");
                    System.out.println("                 break;");
                    System.out.println();
                    System.out.println("                 default:");
                    System.out.println("                      System.out.println(\"Invalid\");");
                    System.out.println("            }");
                    System.out.println("         }");
                    System.out.println("      }");
                    System.out.println("  }");
                    System.out.println();
                    System.out.println("--------------------------------------------------------------------------------------------------------- ");
                                     
                    break;

                case 5:
                    System.out.println("Tree Data Structure");
                    System.out.println();
                    System.out.println("import java.util.ArrayList;");
                    System.out.println("import java.util.List;");
                    System.out.println();
                    System.out.println("public class TreeDsa {");
                    System.out.println("    static class Node {");
                    System.out.println("        int item;");
                    System.out.println("        List<Node> children;");
                    System.out.println();
                    System.out.println("        public Node(int key) {");
                    System.out.println("              item = key;");
                    System.out.println("              children = new ArrayList<>();");
                    System.out.println("        }");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    Node root;");
                    System.out.println();
                    System.out.println("    TreeDsa() {");
                    System.out.println("         root = null;");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("     public void createNonBinaryTree() {");
                    System.out.println("         // Create nodes of the non-binary tree");
                    System.out.println("         root = new Node(1);");
                    System.out.println("         Node child2 = new Node(2);");
                    System.out.println("         Node child3 = new Node(3);}");
                    System.out.println("         Node child4 = new Node(4);");
                    System.out.println("         Node child5 = new Node(5);");
                    System.out.println("         Node child6 = new Node(6);");
                    System.out.println("         Node child7 = new Node(7);");
                    System.out.println("         Node child8 = new Node(8);");
                    System.out.println("         Node child9 = new Node(9);");
                    System.out.println("         Node child10 = new Node(10);");
                    System.out.println();
                    System.out.println("         root.children.add(child2);");
                    System.out.println("         root.children.add(child3);");
                    System.out.println("         child2.children.add(child4);");
                    System.out.println("         child2.children.add(child5);");
                    System.out.println("         child2.children.add(child6);");
                    System.out.println("         child3.children.add(child7);");
                    System.out.println("         child7.children.add(child8);");
                    System.out.println("         child7.children.add(child9);");
                    System.out.println("         child7.children.add(child10);");
                    System.out.println("     ");
                    System.out.println();
                    System.out.println("     public int countLeaves(Node node) {");
                    System.out.println("         // Base case: node is a leaf (no children)");
                    System.out.println("         if (node.children.isEmpty()) {");
                    System.out.println("              return 1;");
                    System.out.println("         }");
                    System.out.println();
                    System.out.println("         // Recursive case: sum the leaves of all children");
                    System.out.println("         int leaves = 0;");
                    System.out.println("         for (Node child : node.children) {");
                    System.out.println("              leaves += countLeaves(child);");
                    System.out.println("         }");
                    System.out.println("         return leaves;");
                    System.out.println("     }");
                    System.out.println();
                    System.out.println("     public int countLeaves() {");
                    System.out.println("         // Start counting leaves from the root");
                    System.out.println("         return countLeaves(root);");
                    System.out.println("     }");
                    System.out.println();
                    System.out.println("     public static void main(String[] args) {");
                    System.out.println("         TreeDsa tree = new TreeDsa();");
                    System.out.println();
                    System.out.println("         tree.createNonBinaryTree();");
                    System.out.println();
                    System.out.println("         System.out.println(\"Non-Binary Tree Structure\");");
                    System.out.println("         System.out.println(\"Total number of leaves: \" + tree.countLeaves());");
                    System.out.println("     }");
                    System.out.println(" }");
                    System.out.println();
                    System.out.println("--------------------------------------------------------------------------------------------------------- ");
                    
                    break;

                case 6:
                    System.out.println("Binary Tree Data Structure");
                    System.out.println();
                    System.out.println("public class Leaves {");
                    System.out.println("    static class Node {");
                    System.out.println("          int item;");
                    System.out.println("          Node left, right;");
                    System.out.println();
                    System.out.println("          public Node(int key) {");
                    System.out.println("                item = key;");
                    System.out.println("                left = right = null;");
                    System.out.println("          }");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    Node root;");
                    System.out.println();
                    System.out.println("    Leaves() {");
                    System.out.println("         root = null;");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    // method to count leaf nodes");
                    System.out.println("    public static int countLeaf(Node node) {");
                    System.out.println("         if (node == null) {");
                    System.out.println("             return 0;");
                    System.out.println("         }");
                    System.out.println("         if (node.left == null && node.right == null) {");
                    System.out.println("             return 1;");
                    System.out.println("         } else {");
                    System.out.println("             return countLeaf(node.left) + countLeaf(node.right);");
                    System.out.println("         }");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    public void createBinaryTree() {");
                    System.out.println("         // Create nodes of the binary tree");
                    System.out.println("         root = new Node(1);");
                    System.out.println("         root.left = new Node(2);");
                    System.out.println("         root.right = new Node(17);");
                    System.out.println("         root.left.left = new Node(3);");
                    System.out.println("         root.left.right = new Node(4);");
                    System.out.println("         root.left.left.left = new Node(5);");
                    System.out.println("         root.left.left.right = new Node(6);");
                    System.out.println("         root.left.right.left = new Node(7);");
                    System.out.println("         root.left.right.right = new Node(8);");
                    System.out.println("         root.right.left = new Node(18);");
                    System.out.println("         root.right.left.left = new Node(20);");
                    System.out.println("         root.right.left.right = new Node(21);");
                    System.out.println("         root.right.right = new Node(19);");
                    System.out.println("         root.right.right.left = new Node(22);");
                    System.out.println("         root.right.right.right = new Node(23);");
                    System.out.println();
                    System.out.println("         // Create child nodes of left child");
                    System.out.println("         root.left.left.left.left = new Node(9);");
                    System.out.println("         root.left.left.left.right = new Node(10);");
                    System.out.println("         root.left.left.right.left = new Node(11);");
                    System.out.println("         root.left.left.right.right = new Node(12);");
                    System.out.println("         root.left.right.left.left = new Node(13);");
                    System.out.println("         root.left.right.left.right = new Node(14);");
                    System.out.println("         root.left.right.right.left = new Node(15);");
                    System.out.println("         root.left.right.right.right = new Node(16);");
                    System.out.println();
                    System.out.println("         // Create child nodes of right child");
                    System.out.println("         root.right.left.left.left = new Node(24);");
                    System.out.println("         root.right.left.left.right = new Node(25);");
                    System.out.println("         root.right.left.right.left = new Node(26);");
                    System.out.println("         root.right.left.right.right = new Node(27);");
                    System.out.println("         root.right.right.left.left = new Node(28);");
                    System.out.println("         root.right.right.left.right = new Node(29);");
                    System.out.println("         root.right.right.right.left = new Node(30);");
                    System.out.println("         root.right.right.right.right = new Node(31);");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    public static void main(String[] args) {");
                    System.out.println("         Leaves tree = new Leaves();");
                    System.out.println();
                    System.out.println("         tree.createBinaryTree();");
                    System.out.println();
                    System.out.println("         int leafNodes = countLeaf(tree.root);");
                    System.out.println("         System.out.println(\"-------------------- Configuration: Node -------------\");");
                    System.out.println("         System.out.println();");
                    System.out.println("         System.out.println(\"Total Leaf Nodes = \" + leafNodes);");
                    System.out.println("     }");
                    System.out.println(" }");
                    System.out.println();
                    System.out.println("--------------------------------------------------------------------------------------------------------- ");
                    break;
                
                case 7:
                    System.out.println("Graph in Java Data Structure");
                    System.out.println();
                    System.out.println("public class graph {");
                    System.out.println();
                    System.out.println("     // Inner class to represent edges");
                    System.out.println("     class Edge {");
                    System.out.println("         int src, dest;");
                    System.out.println("     }");
                    System.out.println();
                    System.out.println("     // Number of vertices and edges");
                    System.out.println("     int vertices, edges;");
                    System.out.println();
                    System.out.println("     // Array to store all edges");
                    System.out.println("     Edge[] edge;");
                    System.out.println();
                    System.out.println("     public graph(int vertices, int edges) {");
                    System.out.println("          this.vertices = vertices;");
                    System.out.println("          this.edges = edges;");
                    System.out.println();
                    System.out.println("          edge = new Edge[edges];");
                    System.out.println("          for (int i = 0; i < edges; i++) {");
                    System.out.println("               edge[i] = new Edge();");
                    System.out.println("          }");
                    System.out.println("    }");
                    System.out.println();
                    System.out.println("    public static void main(String[] args) {  ");
                    System.out.println("           // Create an object of Graph");
                    System.out.println("           int noVertices = 10;   ");
                    System.out.println("           int noEdges = 19;");
                    System.out.println("           graph g = new graph(noVertices, noEdges);");
                    System.out.println();
                    System.out.println("           // Create edges for the graph");
                    System.out.println("           g.edge[0].src = 1; // edge 1---2");
                    System.out.println("           g.edge[0].dest = 2;");
                    System.out.println("           g.edge[1].src = 1; // edge 1---3");
                    System.out.println("           g.edge[1].dest = 3;");
                    System.out.println("           g.edge[2].src = 1; // edge 1---4");
                    System.out.println("           g.edge[2].dest = 4;");
                    System.out.println("           g.edge[3].src = 2; // edge 2---4");
                    System.out.println("           g.edge[3].dest = 4;");
                    System.out.println("           g.edge[4].src = 2; // edge 2---5");
                    System.out.println("           g.edge[4].dest = 5;");
                    System.out.println("           g.edge[5].src = 3; // edge 3---4");
                    System.out.println("           g.edge[5].dest = 4;");
                    System.out.println("           g.edge[6].src = 3; // edge 3---5");
                    System.out.println("           g.edge[6].dest = 5;");
                    System.out.println("           g.edge[7].src = 4; // edge 4---5");
                    System.out.println("           g.edge[7].dest = 5;");
                    System.out.println();
                    System.out.println("           g.edge[8].src = 5; // edge 5---6");
                    System.out.println("           g.edge[8].dest = 6;");
                    System.out.println("           g.edge[9].src = 5;  // edge 5---7");
                    System.out.println("           g.edge[9].dest = 7; ");
                    System.out.println("           g.edge[10].src = 6; // edge 6---7");
                    System.out.println("           g.edge[10].dest = 7;");
                    System.out.println("           g.edge[11].src = 8; // edge 8---7");
                    System.out.println("           g.edge[11].dest = 7;");
                    System.out.println("           g.edge[12].src = 8; // edge 8---10");
                    System.out.println("           g.edge[12].dest = 10;");
                    System.out.println("           g.edge[13].src = 9; // edge 9---8");
                    System.out.println("           g.edge[13].dest = 8;");
                    System.out.println("           g.edge[14].src = 9; // edge 9---10");
                    System.out.println("           g.edge[14].dest = 10;");
                    System.out.println("           g.edge[15].src = 9;  // edge 9---3");
                    System.out.println("           g.edge[15].dest = 3;");
                    System.out.println("           g.edge[16].src = 3;  // edge 3---10");
                    System.out.println("           g.edge[16].dest = 10;");
                    System.out.println("           g.edge[17].src = 3;  // edge 3---7");
                    System.out.println("           g.edge[17].dest = 7;");
                    System.out.println("           g.edge[18].src = 10;  // edge 10---7");
                    System.out.println("           g.edge[18].dest = 7;");
                    System.out.println();
                    System.out.println("           // Print the graph");
                    System.out.println("           for (int i = 0; i < noEdges; i++) {");
                    System.out.println("                System.out.println(g.edge[i].src + \" - \" + g.edge[i].dest);");            
                    System.out.println("             ");
                    System.out.println("           }");
                    System.out.println("      }");
                    System.out.println("}");
                    System.out.println();
                    System.out.println("--------------------------------------------------------------------------------------------------------- ");
                    break;
                case 8:
                    System.out.println("Thank you! Have a great day!");
                    System.exit(0);
                    break;
                   
                default:
                    System.out.println("Invalid");
                    break;
            }
            
            System.out.print("\nTry Again? (Y/N): ");
            ans = console.next().charAt(0);
            
            if (!(ans == 'Y' || ans == 'y')) {
                System.out.println("Thank you! Have a great day!");
            }
        }
    }                            
}
